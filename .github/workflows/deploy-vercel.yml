# ==============================================================================
# GitHub Actions: Deploy to Vercel
# ==============================================================================
# Automatically deploys the Next.js application to Vercel on:
# - Push to main branch (production)
# - Pull requests (preview deployments)
# - Manual workflow dispatch
#
# Prerequisites:
# 1. Vercel project created: https://vercel.com/new
# 2. GitHub secrets configured:
#    - VERCEL_TOKEN: Personal Access Token from Vercel
#    - VERCEL_ORG_ID: Organization ID from .vercel/project.json
#    - VERCEL_PROJECT_ID: Project ID from .vercel/project.json
# 3. Environment variables in Vercel dashboard:
#    - All vars from .env.example
# ==============================================================================

name: Deploy to Vercel

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # ==============================================================================
  # Lint and Type Check
  # ==============================================================================
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

  # ==============================================================================
  # Deploy to Vercel
  # ==============================================================================
  deploy:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: quality-checks
    outputs:
      preview-url: ${{ steps.deploy.outputs.preview-url }}
      deployment-url: ${{ steps.deploy.outputs.deployment-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=${{ github.ref == 'refs/heads/main' && 'production' || 'preview' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt ${{ github.ref == 'refs/heads/main' && '--prod' || '' }} --token=${{ secrets.VERCEL_TOKEN }})
          echo "deployment-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          if [ "${{ github.ref }}" != "refs/heads/main" ]; then
            echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with Preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.preview-url }}';
            const comment = `
            ## üöÄ Deployment Preview Ready!

            Your changes have been deployed to Vercel:

            **Preview URL:** ${deploymentUrl}

            ### üìã Deployment Details
            - **Commit:** ${context.sha.substring(0, 7)}
            - **Branch:** ${context.ref}
            - **Environment:** Preview
            - **Status:** ‚úÖ Success

            ### üß™ Test Checklist
            - [ ] Homepage loads correctly
            - [ ] Lead form submits successfully
            - [ ] Responsive design works on mobile
            - [ ] No console errors

            ---
            *Deployed via GitHub Actions*
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ==============================================================================
  # Post-Deployment Health Check
  # ==============================================================================
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for deployment to be ready
        run: sleep 30

      - name: Check deployment health
        run: |
          DEPLOYMENT_URL="${{ needs.deploy.outputs.deployment-url }}"

          # Check homepage
          echo "Checking homepage..."
          HTTP_CODE=$(curl -o /dev/null -s -w "%{http_code}" "$DEPLOYMENT_URL")

          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "‚ùå Health check failed: Homepage returned $HTTP_CODE"
            exit 1
          fi

          echo "‚úÖ Health check passed: Homepage is accessible"

          # Check API endpoint (leads)
          echo "Checking API endpoint..."
          API_CODE=$(curl -o /dev/null -s -w "%{http_code}" -X OPTIONS "$DEPLOYMENT_URL/api/leads")

          if [ "$API_CODE" -ne 200 ] && [ "$API_CODE" -ne 405 ]; then
            echo "‚ö†Ô∏è Warning: API endpoint returned $API_CODE"
          else
            echo "‚úÖ API endpoint is accessible"
          fi

      - name: Send success notification
        if: success()
        run: |
          echo "üéâ Deployment to production successful!"
          echo "URL: ${{ needs.deploy.outputs.deployment-url }}"

      - name: Send failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment health check failed!"
          echo "Please investigate: ${{ needs.deploy.outputs.deployment-url }}"

  # ==============================================================================
  # Rollback on Failure (Optional)
  # ==============================================================================
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy, health-check]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify team of deployment failure
        run: |
          echo "‚ö†Ô∏è Production deployment failed health checks"
          echo "Consider rolling back to previous version"
          # Add Slack/email notification here if needed
