# ==============================================================================
# GitHub Actions: Supabase Database Migrations
# ==============================================================================
# Automatically applies database migrations to Supabase on:
# - Push to main branch (production)
# - Manual workflow dispatch
#
# Prerequisites:
# 1. Supabase project created: https://supabase.com/dashboard
# 2. Supabase CLI installed in workflow
# 3. GitHub secrets configured:
#    - SUPABASE_ACCESS_TOKEN: Personal Access Token from Supabase
#    - SUPABASE_DB_PASSWORD: Database password from Supabase settings
#    - SUPABASE_PROJECT_ID: Project ID from Supabase dashboard
#
# Migration Strategy:
# - Migrations are applied sequentially in order
# - Failed migrations halt the workflow
# - Rollback strategy: restore from automated Supabase backup
# ==============================================================================

name: Supabase Migrations

on:
  push:
    branches:
      - main
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/supabase-migrations.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
  SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_DB_PASSWORD }}
  SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

jobs:
  # ==============================================================================
  # Validate Migrations
  # ==============================================================================
  validate:
    name: Validate Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Verify migration files
        run: |
          echo "Checking for migration files..."
          if [ ! -d "supabase/migrations" ]; then
            echo "❌ Error: supabase/migrations directory not found"
            exit 1
          fi

          MIGRATION_COUNT=$(find supabase/migrations -name "*.sql" | wc -l)
          echo "Found $MIGRATION_COUNT migration file(s)"

          if [ "$MIGRATION_COUNT" -eq 0 ]; then
            echo "⚠️ Warning: No migration files found"
            exit 0
          fi

      - name: Validate SQL syntax
        run: |
          echo "Validating SQL syntax..."
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Checking $file..."
              # Basic SQL syntax validation
              if ! grep -q "^--" "$file"; then
                echo "⚠️ Warning: $file has no comment header"
              fi
            fi
          done
          echo "✅ SQL syntax validation passed"

  # ==============================================================================
  # Backup Database (Production Only)
  # ==============================================================================
  backup:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: validate
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    steps:
      - name: Trigger Supabase backup
        run: |
          echo "📦 Database backup is handled automatically by Supabase"
          echo "Backups are retained for 7 days (Free tier) or 30 days (Pro+)"
          echo "Point-in-time recovery available for last 24 hours (Pro+)"
          echo ""
          echo "To restore from backup if migration fails:"
          echo "1. Go to https://supabase.com/dashboard/project/${{ env.SUPABASE_PROJECT_ID }}/settings/database"
          echo "2. Click 'Backups' tab"
          echo "3. Select most recent backup before migration"
          echo "4. Click 'Restore'"

  # ==============================================================================
  # Apply Migrations
  # ==============================================================================
  migrate:
    name: Apply Migrations
    runs-on: ubuntu-latest
    needs: [validate, backup]
    if: always() && needs.validate.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase project
        run: |
          supabase link --project-ref ${{ env.SUPABASE_PROJECT_ID }} --password ${{ env.SUPABASE_DB_PASSWORD }}

      - name: Check migration status
        id: status
        run: |
          echo "Checking current migration status..."
          supabase migration list || true

      - name: Apply migrations
        id: migrate
        run: |
          echo "🚀 Applying migrations to Supabase..."

          # Apply migrations with verbose output
          if supabase db push; then
            echo "✅ Migrations applied successfully"
            echo "migration-status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Migration failed"
            echo "migration-status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Verify migration
        if: steps.migrate.outputs.migration-status == 'success'
        run: |
          echo "Verifying migration status..."
          supabase migration list

      - name: Generate TypeScript types
        if: steps.migrate.outputs.migration-status == 'success'
        run: |
          echo "Generating updated TypeScript types..."
          mkdir -p types
          supabase gen types typescript --linked > types/database.types.ts

          echo "✅ TypeScript types generated"
          echo "Types saved to: types/database.types.ts"

      - name: Create Pull Request with updated types
        if: steps.migrate.outputs.migration-status == 'success' && github.ref == 'refs/heads/main'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update database types after migration'
          branch: chore/update-database-types
          title: '🔄 Update Database Types'
          body: |
            ## 🔄 Database Types Updated

            This PR contains updated TypeScript types generated after applying database migrations.

            ### Changes
            - Updated `types/database.types.ts` to reflect latest schema

            ### Migration Applied
            - Commit: ${{ github.sha }}
            - Branch: ${{ github.ref }}

            ### Action Required
            - [ ] Review type changes
            - [ ] Merge to keep types in sync with database

            ---
            *Auto-generated by GitHub Actions*
          labels: |
            dependencies
            automated

  # ==============================================================================
  # Post-Migration Health Check
  # ==============================================================================
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: migrate
    if: always() && needs.migrate.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test database connection
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Testing database connection..."

          # Create a simple test script
          cat > test-db-connection.mjs << 'EOF'
          import { createClient } from '@supabase/supabase-js';

          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
          );

          async function testConnection() {
            try {
              // Test query to verify connection and schema
              const { data, error } = await supabase.from('clients').select('count');

              if (error) {
                console.error('❌ Database query failed:', error.message);
                process.exit(1);
              }

              console.log('✅ Database connection successful');
              console.log('✅ Schema is accessible');
              process.exit(0);
            } catch (err) {
              console.error('❌ Connection test failed:', err);
              process.exit(1);
            }
          }

          testConnection();
          EOF

          node test-db-connection.mjs

      - name: Verify critical tables exist
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
        run: |
          echo "Verifying critical tables..."

          cat > verify-tables.mjs << 'EOF'
          import { createClient } from '@supabase/supabase-js';

          const supabase = createClient(
            process.env.SUPABASE_URL,
            process.env.SUPABASE_SERVICE_ROLE_KEY
          );

          const REQUIRED_TABLES = [
            'clients',
            'properties',
            'leads',
            'jobs',
            'estimates',
            'invoices',
            'payments'
          ];

          async function verifyTables() {
            let allTablesExist = true;

            for (const table of REQUIRED_TABLES) {
              try {
                const { error } = await supabase.from(table).select('count').limit(0);

                if (error) {
                  console.error(`❌ Table '${table}' is not accessible:`, error.message);
                  allTablesExist = false;
                } else {
                  console.log(`✅ Table '${table}' exists and is accessible`);
                }
              } catch (err) {
                console.error(`❌ Error checking table '${table}':`, err);
                allTablesExist = false;
              }
            }

            if (!allTablesExist) {
              console.error('❌ Some required tables are missing or inaccessible');
              process.exit(1);
            }

            console.log('✅ All required tables verified');
            process.exit(0);
          }

          verifyTables();
          EOF

          node verify-tables.mjs

  # ==============================================================================
  # Notification
  # ==============================================================================
  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [migrate, health-check]
    if: always()
    steps:
      - name: Migration success notification
        if: needs.migrate.result == 'success' && needs.health-check.result == 'success'
        run: |
          echo "✅ Migration completed successfully!"
          echo "All health checks passed"

      - name: Migration failure notification
        if: needs.migrate.result == 'failure' || needs.health-check.result == 'failure'
        run: |
          echo "❌ Migration failed or health checks failed!"
          echo "Please check the logs and restore from backup if necessary"
          echo ""
          echo "Restoration steps:"
          echo "1. Go to Supabase Dashboard > Settings > Database > Backups"
          echo "2. Find the backup from before this migration"
          echo "3. Click 'Restore' to rollback changes"
