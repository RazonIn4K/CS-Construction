# ====================================================================
# CD Home Improvements - Development Environment Configuration
# ====================================================================
# This file contains example configuration for LOCAL DEVELOPMENT
#
# Setup Instructions:
# 1. Copy this file to .env.local
# 2. Replace all placeholder values with your actual credentials
# 3. Never commit .env.local to version control
# 4. Use test/development API keys where available
# ====================================================================

# ==================================
# Application Environment
# ==================================
NODE_ENV=development
NEXT_PUBLIC_APP_URL=http://localhost:3000

# ==================================
# Supabase Configuration (Development)
# ==================================
# Get from: https://supabase.com/dashboard/project/YOUR_PROJECT/settings/api
NEXT_PUBLIC_SUPABASE_URL=https://YOUR_PROJECT_REF.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_from_dashboard
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_role_key_from_dashboard

# Direct database connection (for migrations)
DATABASE_URL=postgresql://postgres:YOUR_PASSWORD@db.YOUR_PROJECT_REF.supabase.co:5432/postgres

# ==================================
# Stripe Configuration (TEST MODE)
# ==================================
# Get from: https://dashboard.stripe.com/test/apikeys
# IMPORTANT: Use TEST keys for development (sk_test_... and pk_test_...)
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_51ExampleKey123456789
STRIPE_SECRET_KEY=sk_test_51ExampleSecretKey123456789

# Webhook secret (from Stripe CLI)
# Run: stripe listen --forward-to localhost:3000/api/webhooks/stripe
STRIPE_WEBHOOK_SECRET=your_stripe_webhook_secret_from_stripe_cli

# ==================================
# Invoice Ninja Configuration
# ==================================
# For development, you can:
# Option 1: Use Docker stack on localhost
# Option 2: Use staging Invoice Ninja instance
# Option 3: Skip and mock responses

INVOICENINJA_URL=http://localhost:8080  # Docker stack
# Or: https://staging-portal.cdhomeimprovementsrockford.com

# Get API token from Invoice Ninja → Settings → API Tokens
INVOICENINJA_API_TOKEN=YOUR_INVOICENINJA_API_TOKEN

# Webhook verification secret (set in Invoice Ninja webhook config)
INVOICENINJA_WEBHOOK_SECRET=your_shared_secret_for_development

# ==================================
# n8n Configuration
# ==================================
# For development:
# Option 1: Use local n8n (Docker)
# Option 2: Use n8n.cloud
# Option 3: Skip and mock workflow

N8N_WEBHOOK_BASE_URL=http://localhost:5678  # Local n8n
# Or: https://YOUR_INSTANCE.n8n.cloud

N8N_WEBHOOK_LEAD_INTAKE=/webhook/lead-intake

# n8n API key (if using n8n API)
N8N_API_KEY=your_n8n_api_key_for_development

# ==================================
# Email Service (Development)
# ==================================
# For development, use email testing service
# Recommended: Mailtrap (https://mailtrap.io) or MailHog

# Mailtrap (Development Email Testing)
EMAIL_PROVIDER=mailtrap
MAILTRAP_USER=your_mailtrap_username
MAILTRAP_PASS=your_mailtrap_password
MAILTRAP_HOST=smtp.mailtrap.io
MAILTRAP_PORT=2525
EMAIL_FROM=dev@cdhomeimprovementsrockford.com

# OR use real service with development domain
# EMAIL_PROVIDER=postmark
# POSTMARK_SERVER_TOKEN=your_development_postmark_token
# EMAIL_FROM=dev@cdhomeimprovementsrockford.com

# ==================================
# SMS Service (Optional - Development)
# ==================================
# For development, you can skip SMS or use Twilio test credentials
# Note: ENABLE_SMS_NOTIFICATIONS is defined in Feature Flags section below

# Twilio Test Credentials (optional)
TWILIO_ACCOUNT_SID=ACtest123456789
TWILIO_AUTH_TOKEN=test_auth_token
TWILIO_PHONE_NUMBER=+15005550006  # Twilio test number

# ==================================
# Sentry (Error Tracking - Optional for Dev)
# ==================================
# For development, Sentry is optional
# To enable, create a development project in Sentry

# NEXT_PUBLIC_SENTRY_DSN=https://PUBLIC_KEY@o000000.ingest.sentry.io/0000000
# SENTRY_DSN=https://PUBLIC_KEY@o000000.ingest.sentry.io/0000000
# SENTRY_AUTH_TOKEN=your_sentry_auth_token_for_development
# SENTRY_PROJECT=cd-construction-dev
# SENTRY_ORG=your-org-slug

# Disable Sentry in development (recommended)
NEXT_PUBLIC_SENTRY_DSN=
SENTRY_DSN=

# ==================================
# Admin/Security
# ==================================
# Use secure random keys even for development
# Generate with: openssl rand -hex 32
ADMIN_API_KEY=your_secure_random_dev_api_key
ADMIN_REPLAY_SECRET=your_secure_random_dev_replay_secret

# ==================================
# Feature Flags
# ==================================
# Enable/disable features during development
ENABLE_INVOICENINJA_WEBHOOK=false  # Set true to test Invoice Ninja webhooks
ENABLE_EMAIL_NOTIFICATIONS=true    # Email testing
ENABLE_SMS_NOTIFICATIONS=false     # Set true to test SMS (defined once)

# ==================================
# Development Tools
# ==================================
# Enable verbose logging
DEBUG=true
LOG_LEVEL=debug

# Disable rate limiting
DISABLE_RATE_LIMIT=true

# Skip webhook signature verification (WARNING: Dev only!)
SKIP_WEBHOOK_VERIFICATION=false  # Keep false to test properly

# ==================================
# Database Seeding (Optional)
# ==================================
# Auto-seed database with test data
AUTO_SEED_DATABASE=false
SEED_TEST_CLIENTS=10
SEED_TEST_LEADS=50

# ==================================
# Mock Services (Optional)
# ==================================
# Use mocks instead of real API calls for faster development
USE_MOCK_STRIPE=false
USE_MOCK_INVOICENINJA=false
USE_MOCK_N8N=false
USE_MOCK_EMAIL=true  # Recommended for development

# ==================================
# Notes for Developers
# ==================================
#
# Getting Started:
# 1. Install dependencies: npm install
# 2. Copy this file: cp .env.development.example .env.local
# 3. Set up Supabase:
#    - supabase link --project-ref YOUR_PROJECT
#    - supabase db push
#    - supabase gen types typescript --linked > types/database.types.ts
# 4. Start Docker stack (optional): cd docker && docker-compose up -d
# 5. Start development server: npm run dev
# 6. Visit: http://localhost:3000
#
# Testing Payments:
# - Use Stripe test cards: https://stripe.com/docs/testing
# - Test card: 4242 4242 4242 4242
# - Any future expiry date, any 3-digit CVC
#
# Testing Webhooks:
# - Install Stripe CLI: https://stripe.com/docs/stripe-cli
# - Run: stripe listen --forward-to localhost:3000/api/webhooks/stripe
# - Trigger: stripe trigger payment_intent.succeeded
#
# Database:
# - View data: https://supabase.com/dashboard/project/YOUR_PROJECT/editor
# - Run migrations: supabase db push
# - Reset database: supabase db reset
#
# Debugging:
# - Check browser console for errors
# - Check terminal for API errors
# - Use React DevTools for component inspection
# - Use Network tab to inspect API calls
#
# ====================================================================
